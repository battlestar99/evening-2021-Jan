int x; 

double x; 

System.out.println(x);

homapage hp = new homepage(); 

quotepage qp = new quotepage(); 

scanner sc = new scnner(); 
homepage sc = new homepage();

for every page you have to create page object
a page has just one webelement
a page 100 webelements 

Test library or Testing framework: 

TestNG/Junit - test next generation - traditional testing framework 
cucumber - behaviour driven development/testing ( BDD) - 5 years 

why: 

1. it doesnt give us any functionality for passing or failing tests
2. organization of code 
3. it doesn't give us any test report 
4. we can not create a test suite - collection of test cases 
5. data driven testing - cross browser testing 

TestNG installation: 

1. TestNG plugin for eclipse - 
2. TestNG jar file - 


Structure of TestNG 

provides us a template - to run/organize our code 

annotations and sequence in the testing library 

one java class - one test script 

@BeforeTest
public void setupTest(){}
providing pre-requirement of the test 

@Test
public void linktest(){}

@Test
public void logintest(){}


@AfterTest
public void finishTest(){}
provdie post-requirement of the test 



@BeforeTest

@Test
@Test

@AfterTest


TestNG - runnable class 
beforetest,aftertest, test - driver to open the browser 

page object model classes - non runnable class
constructor - to pass the driver to the page object model class

TestNG - organize the code 

beforetest - pre-requirement
aftertest - post-requirement 

@Test - Test case 

validatesignup.java 
@Test - validate at least one requirement
@Test
@Test

3 tests - 3 test cases 

50 test scripts - 200 @Test annotation 

200 test cases - 200 tests 

selenium - browser interaction
testNG - for testing purpose

Test environment - test code 

package - java folder 
Test scripts 
page object model
utilities 

5 pages 
homepage
signuppage
loginpage
checkoutpage
productpage

100 web elements >> 20 web elements 

requirements - 

loginmodule : 

req 1: login page should have login user name , password and login button

pre-req - open the browser
go to the url 

test 
check if user name text box is presetn - cp.getusername.isdisplyed
check if password text box is present - cp.getpassword.isdisplaye
check if login button is present - cp.loginbutton.isdisplayed

post-reg
closing the browser 
driver.quit


req 2: wroing user name submission should show a message "wrong username"

req 3: wrong password should show a message "wrong password"

req 4: wrong password submitted 4 times should lock the account

req 5: forget password link should navigat to "www.agile1tech.com/forgetpassword" link

req 6 : forget password should reset password through your email address


testscripts >> validatewrongLoginmessage 
@beforemethod
driver.navigate.manage.refresh
@Test
public void validatewrongUsername()

@Test(dependsONmethod= "validatewrongUsername")
public void validatewroingpassword()



req 2: wroing user name submission should show a message "wrong username"

req 3: wrong password should show a message "wrong password"

java programming - 

selenium-testng-cucumber - java 

global and local

int x;

x=76;

20th February - saturday and sunday 

10-2 

















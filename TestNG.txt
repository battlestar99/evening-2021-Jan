int x; 

double x; 

System.out.println(x);

homapage hp = new homepage(); 

quotepage qp = new quotepage(); 

scanner sc = new scnner(); 
homepage sc = new homepage();

for every page you have to create page object
a page has just one webelement
a page 100 webelements 

Test library or Testing framework: 

TestNG/Junit - test next generation - traditional testing framework 
cucumber - behaviour driven development/testing ( BDD) - 5 years 

why: 

1. it doesnt give us any functionality for passing or failing tests
2. organization of code 
3. it doesn't give us any test report 
4. we can not create a test suite - collection of test cases 
5. data driven testing - cross browser testing 

TestNG installation: 

1. TestNG plugin for eclipse - 
2. TestNG jar file - 


Structure of TestNG 

provides us a template - to run/organize our code 

annotations and sequence in the testing library 

one java class - one test script 

@BeforeTest
public void setupTest(){}
providing pre-requirement of the test 

@Test
public void linktest(){}

@Test
public void logintest(){}


@AfterTest
public void finishTest(){}
provdie post-requirement of the test 



@BeforeTest

@Test
@Test

@AfterTest


TestNG - runnable class 
beforetest,aftertest, test - driver to open the browser 

page object model classes - non runnable class
constructor - to pass the driver to the page object model class

TestNG - organize the code 

beforetest - pre-requirement
aftertest - post-requirement 

@Test - Test case 

validatesignup.java 
@Test - validate at least one requirement
@Test
@Test

3 tests - 3 test cases 

50 test scripts - 200 @Test annotation 

200 test cases - 200 tests 

selenium - browser interaction
testNG - for testing purpose

Test environment - test code 

package - java folder 
Test scripts 
page object model
utilities 

5 pages 
homepage
signuppage
loginpage
checkoutpage
productpage

100 web elements >> 20 web elements 

requirements - 

loginmodule : 

req 1: login page should have login user name , password and login button

pre-req - open the browser
go to the url 

test 
check if user name text box is presetn - cp.getusername.isdisplyed
check if password text box is present - cp.getpassword.isdisplaye
check if login button is present - cp.loginbutton.isdisplayed

post-reg
closing the browser 
driver.quit


req 2: wroing user name submission should show a message "wrong username"

req 3: wrong password should show a message "wrong password"

req 4: wrong password submitted 4 times should lock the account

req 5: forget password link should navigat to "www.agile1tech.com/forgetpassword" link

req 6 : forget password should reset password through your email address


testscripts >> validatewrongLoginmessage 
@beforemethod
driver.navigate.manage.refresh
@Test
public void validatewrongUsername()

@Test(dependsONmethod= "validatewrongUsername")
public void validatewroingpassword()



req 2: wroing user name submission should show a message "wrong username"

req 3: wrong password should show a message "wrong password"

java programming - 

selenium-testng-cucumber - java 

global and local

int x;

x=76;

20th February - saturday and sunday 

10-2 
manual testing - 10 test cases - 1 defect - log the defect in jira - 

automation testing - 200 test cases - 5 defects - log the defects in jira

excel + word >> writing test cases - manual test case 

java >> automated test cases - 

release February 1st ( 10) - April 31st (11) 

what could be the reasons to go to the new release? 

1. software can have some modification
2. bug fixes 
3. new functionalites 
4. programmer is improving the code - 

release planning >> 

1. new user stories >>  new functionalites 
2. new user stories >> modification
3. bug fixes
4. improve the code 

start work : 

sprint 1 
2 user stories >> 
executing total new test >> smoke testing 

200 test scripts + 10 test scripts >> 210 test scripts 

210+20 >> 230 
230+5>> 235

regression >> 

1000 test cases >> 

10 tester >> 1 million dollar yearly
2 automaiton tester >> 800K

What to learn: TestNG 

1. organize our code using annotations 
2. how the reports are created 
3. how to create pass/fail scenrio 
4. how to create test suite 
5. how to do parameterzied testing - data driven testing 

creating pass fail scenrio - assertion 

when a test fail -- 

1. what do you do to know that application has defect ? 

Assert class 

expected result - must come from the requirement
actual result - you are getting from test 

expecte and actula is compared 

if matches >> test pass
if doesn't match >> test fail 


Test suite >> collection of test cases or test scripts

xml file in TestNG 




















